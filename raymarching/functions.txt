function number distSphere(V:vector, Radius){
    return sqrt(V:x()^2+V:y()^2+V:z()^2)-Radius
}
function number distCube(V:vector, Size){
    return Size * (0.5 - max( abs(V:x()),abs(V:y()),abs(V:z())))
}
function number distTest(V:vector){
    local A = vec(mod(V:x(),1),mod(V:y(),1),V:z())-vec(0.5)
    return A:length()-0.3
}

#[
float DE(vec3 z)
{
  z.xy = mod((z.xy),1.0)-vec3(0.5); // instance on xy-plane
  return length(z)-0.3;             // sphere DE
}



float CubeApproxSDF (Vector3 p, float side)
{
  return side * 0.5f - Mathf.Max( Mathf.Abs(p.x), Mathf.Max( Mathf.Abs(p.y), Mathf.Abs(p.z) ) );
}
]#

