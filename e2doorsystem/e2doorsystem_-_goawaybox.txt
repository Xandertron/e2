@name goodbye
@persist Markers:array HoloSeperation Marker1Pos:vector Marker2Pos:vector Center:vector GT:gtable P:table
@model models/hunter/blocks/cube025x025x025.mdl

if (first()){
    runOnTick(1)   
    E = entity()
    
    propSpawnUndo(0)
    
    Markers:pushEntity(E)
    Markers:pushEntity(propSpawn("models/hunter/blocks/cube025x025x025.mdl", E:toWorld( vec( 50, 50, 50)), 1))
    
    for (I = 1, 2){
        Marker = Markers[I, entity]
        Marker:setAlpha(0)
        noCollideAll( Marker, 1)
        
        holoCreate(I)
        holoColor(I, vec(105,0,75))
        holoPos(I, Marker:boxCenterW())
        holoAng(I, Marker:angles())
        holoMaterial(I, "models/wireframe")
        holoModel(I,"models/editor/axis_helper.mdl")
        holoParent(I, Marker)
    }
    for(I = 3, 6){
        holoCreate(I)
        holoAng(I, ang())
        holoModel(I, "models/hunter/blocks/cube8x8x8.mdl")
    }
    
    holoMaterial(3,"models/wireframe")
    holoColor(3,vec(20))
    
    holoMaterial(4,"engine/writez")
    holoColor(4,vec(255))
     
    
    holoMaterial(5,"lights/white")
    holoColor(5,vec(0))
    
    holoMaterial(6,"models/wireframe")
    holoColor(6,vec(50))

    HoloSeperation = 12
    
    GT = gTable(owner():steamID())
    P = GT["players",table] 
}

if (Markers[1, entity]:isPlayerHolding() | Markers[2, entity]:isPlayerHolding() | first()){
    Marker1Pos = Markers[1, entity]:boxCenterW()
    Marker2Pos = Markers[2, entity]:boxCenterW()
    
    Min = minVec(Marker1Pos, Marker2Pos)
    Max = maxVec(Marker1Pos, Marker2Pos)

    Size = Max - Min
    Center = (Min + Max) / 2


    for(I = 1, 4){
        HoloI = I + 2
        HoloOffset = vec(HoloSeperation) * (I - 1)

        holoScaleUnits(HoloI, sign(2.6 - I) * (Size - HoloOffset))
        holoParent(HoloI,E)
        
        TempScale = holoScale(I):z()
        holoPos( HoloI, Center - holoScale(HoloI) * holoEntity(HoloI):boxCenter())
    }
    for(I=1,2){
        Markers[I,entity]:setAng(ang(0))
    }
}

if(findCanQuery()){
    findIncludeClass("player")
    findInBox(Marker1Pos,Marker2Pos)
    A = findToArray()
    for(I=1,A:count()){
        Ply = A[I,entity]
        if(P[Ply:steamID(),number]!=1){
            Ply:plyNoclip(0)
            Ply:plyApplyForce((Ply:boxCenterW()-Center):normalized()*vec(450000)) 
        }
    }
}






