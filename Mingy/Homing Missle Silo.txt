@name Homing Missile Silo
@inputs 
@outputs 
@persist P:array PS:array T:entity
@trigger 
@model models/props_phx/box_torpedo.mdl
runOnTick(1)
if(first()){
    noCollideAll(entity(), 0)
    propSpawnEffect(0)
    entity():setAng(ang(270,0,0))
    entity():setPos(entity():toWorld(vec(0,0,64)))
    
    holoCreate(1)
    holoModel(1,"models/props_phx/amraam.mdl")
    holoPos(1,entity():toWorld(vec(0,0,-9.7)))
    holoParent(1,entity())
    holoAlpha(1,170)
    
    function entity:follow(E:entity){
        TargetPos = E:toWorld(E:boxCenter())
        Pos = TargetPos + E:vel()*0.25
        TargetDir = (Pos - This:pos()):normalized()
        Ang = TargetDir:toAngle()
        Torque = This:toLocalAxis(rotationVector(quat(Ang)/quat(This)))
        This:applyTorque((Torque*500-This:angVelVector()*10)*This:inertia())
        This:applyForce(This:forward()*This:mass()*700)
    }
}
if(changed(owner():keyAttack2())&owner():keyAttack2()&T:isValid()){
    E = propSpawn("models/props_phx/amraam.mdl",holoEntity(1):pos()+vec(0,0,-10),0)
    E:applyForce(vec(0,0,10000))
    P:pushEntity(E)
    entity():soundPlay(1,3,"Weapon_RPG.Single")
}
if(changed(owner():keyAttack1())&owner():keyAttack1()){
    findIncludeClass("lunasflightschool*")
    findIncludeClass("*lfs*")
    findIncludeClass("lfs*")
    findIncludeClass("merydianlfs*")
    findInCone(owner():shootPos(),owner():eye(),20000,5)
    findSortByDistance(owner():shootPos())
    Vehicles = findToArray()
    for(I=1,Vehicles:count()){
        if(Vehicles[I,entity]&(Vehicles[I,entity]:type():find("destruct")==0)){
            print("Targeting: "+Vehicles[1,entity]:model())
            T = Vehicles[1,entity]
            break
        }
    }
}
if(T:isValid()==0){
    T = noentity()
}
for(I=1,P:count()){
    M = P[I,entity]
    if(M:isValid()){
        M:follow(T)
    }
    else{
        P:removeEntity(I)
        break
    }
}
